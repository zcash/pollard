use std::iter;
use std::marker::PhantomData;

use halo2::arithmetic::FieldExt;

pub(crate) mod grain;
pub(crate) mod mds;

#[cfg(test)]
mod test_vectors;

use grain::SboxType;

/// A specification for a Poseidon permutation.
pub trait Spec<F: FieldExt> {
    /// The type used to hold permutation state, or equivalent-length constant values.
    ///
    /// This must be an array of length [`Spec::arity`], that defaults to all-zeroes.
    type State: Default + AsRef<[F]> + AsMut<[F]>;

    /// The arity of this specification.
    fn arity() -> usize;

    /// The number of full rounds for this specification.
    fn full_rounds() -> usize;

    /// The number of partial rounds for this specification.
    fn partial_rounds() -> usize;

    /// The S-box for this specification.
    fn sbox(val: F) -> F;

    /// Side-loaded index of the first correct and secure MDS that will be generated by
    /// the reference implementation.
    ///
    /// This is used by the default implementation of [`Spec::constants`]. If you are
    /// hard-coding the constants, you may leave this unimplemented.
    fn secure_mds(&self) -> usize;

    /// Generates `(round_constants, mds, mds^-1)` corresponding to this specification.
    fn constants(&self) -> (Vec<Self::State>, Vec<Self::State>, Vec<Self::State>) {
        let t = Self::arity();
        let r_f = Self::full_rounds();
        let r_p = Self::partial_rounds();

        let mut grain = grain::Grain::new(SboxType::Pow, t as u16, r_f as u16, r_p as u16);

        let round_constants = (0..(r_f + r_p))
            .map(|_| {
                let mut rc_row = Self::State::default();
                for (rc, value) in rc_row
                    .as_mut()
                    .iter_mut()
                    .zip((0..t).map(|_| grain.next_field_element()))
                {
                    *rc = value;
                }
                rc_row
            })
            .collect();

        let (mds, mds_inv) = mds::generate_mds(&mut grain, t, self.secure_mds());

        (
            round_constants,
            mds.into_iter()
                .map(|row| {
                    let mut mds_row = Self::State::default();
                    for (entry, value) in mds_row.as_mut().iter_mut().zip(row.into_iter()) {
                        *entry = value;
                    }
                    mds_row
                })
                .collect(),
            mds_inv
                .into_iter()
                .map(|row| {
                    let mut mds_row = Self::State::default();
                    for (entry, value) in mds_row.as_mut().iter_mut().zip(row.into_iter()) {
                        *entry = value;
                    }
                    mds_row
                })
                .collect(),
        )
    }
}

/// Poseidon-256 with arity 3, using the `x^5` S-box.
#[derive(Debug)]
pub struct P256Pow5T3<F: FieldExt> {
    secure_mds: usize,
    _field: PhantomData<F>,
}

impl<F: FieldExt> P256Pow5T3<F> {
    pub fn new(secure_mds: usize) -> Self {
        P256Pow5T3 {
            secure_mds,
            _field: PhantomData::default(),
        }
    }
}

impl<F: FieldExt> Spec<F> for P256Pow5T3<F> {
    type State = [F; 3];

    fn arity() -> usize {
        3
    }

    fn full_rounds() -> usize {
        8
    }

    fn partial_rounds() -> usize {
        120
    }

    fn sbox(val: F) -> F {
        val.pow_vartime(&[5])
    }

    fn secure_mds(&self) -> usize {
        self.secure_mds
    }
}

/// Runs the Poseidon permutation on the given state.
fn permute<F: FieldExt, S: Spec<F>>(
    state: &mut S::State,
    mds: &[S::State],
    round_constants: &[S::State],
) {
    // TODO: Check what should happen for odd number of full rounds.
    let r_f = S::full_rounds() / 2;
    let r_p = S::partial_rounds();

    let apply_mds = |state: &mut S::State| {
        let mut new_state = S::State::default();
        // Matrix multiplication
        for i in 0..S::arity() {
            for j in 0..S::arity() {
                new_state.as_mut()[i] += mds[i].as_ref()[j] * state.as_ref()[j];
            }
        }
        *state = new_state;
    };

    let full_round = |state: &mut S::State, rcs: &S::State| {
        for (word, rc) in state.as_mut().iter_mut().zip(rcs.as_ref().iter()) {
            *word = S::sbox(*word + rc);
        }
        apply_mds(state);
    };

    let part_round = |state: &mut S::State, rcs: &S::State| {
        for (word, rc) in state.as_mut().iter_mut().zip(rcs.as_ref().iter()) {
            *word += rc;
        }
        // In a partial round, the S-box is only applied to the first state word.
        state.as_mut()[0] = S::sbox(state.as_ref()[0]);
        apply_mds(state);
    };

    iter::empty()
        .chain(iter::repeat(&full_round as &dyn Fn(&mut S::State, &S::State)).take(r_f))
        .chain(iter::repeat(&part_round as &dyn Fn(&mut S::State, &S::State)).take(r_p))
        .chain(iter::repeat(&full_round as &dyn Fn(&mut S::State, &S::State)).take(r_f))
        .zip(round_constants.iter())
        .fold(state, |state, (round, rcs)| {
            round(state, rcs);
            state
        });
}

fn pad_and_add<F: FieldExt>(state: &mut [F], input: &[F]) {
    let padding = state.len() - input.len();
    // TODO: Decide on a padding strategy (currently padding with all-ones)
    for (word, val) in state
        .iter_mut()
        .zip(input.iter().chain(iter::repeat(&F::one()).take(padding)))
    {
        *word += val;
    }
}

enum SpongeState<F: FieldExt> {
    Absorbing(Vec<F>),
    Squeezing(Vec<F>),
}

/// A Poseidon duplex sponge.
pub struct Duplex<F: FieldExt, S: Spec<F>> {
    sponge: Option<SpongeState<F>>,
    state: S::State,
    rate: usize,
    mds_matrix: Vec<S::State>,
    round_constants: Vec<S::State>,
    _marker: PhantomData<S>,
}

impl<F: FieldExt, S: Spec<F>> Duplex<F, S> {
    /// Constructs a new duplex sponge with the given rate.
    pub fn new(spec: S, rate: usize) -> Self {
        // The sponge capacity must be at least 1.
        // TODO: Construct the capacity from the specification's security level.
        assert!(rate < S::arity());

        let (round_constants, mds_matrix, _) = spec.constants();

        Duplex {
            sponge: Some(SpongeState::Absorbing(vec![])),
            state: S::State::default(),
            rate,
            mds_matrix,
            round_constants,
            _marker: PhantomData::default(),
        }
    }

    fn process(&mut self, input: &[F]) -> Vec<F> {
        pad_and_add(&mut self.state.as_mut()[..self.rate], input);

        permute::<F, S>(&mut self.state, &self.mds_matrix, &self.round_constants);

        self.state.as_ref()[..self.rate].to_vec()
    }

    /// Absorbs an element into the sponge.
    pub fn absorb(&mut self, value: F) {
        match self.sponge.take().unwrap() {
            SpongeState::Absorbing(mut input) => {
                if input.len() < self.rate {
                    input.push(value);
                    self.sponge = Some(SpongeState::Absorbing(input));
                    return;
                }

                // We've already absorbed as many elements as we can
                let _ = self.process(&input);
                self.sponge = Some(SpongeState::Absorbing(vec![value]));
            }
            SpongeState::Squeezing(_) => {
                // Drop the remaining output elements
                self.sponge = Some(SpongeState::Absorbing(vec![value]));
            }
        }
    }

    /// Squeezes an element from the sponge.
    pub fn squeeze(&mut self) -> F {
        loop {
            match self.sponge.take().unwrap() {
                SpongeState::Absorbing(input) => {
                    self.sponge = Some(SpongeState::Squeezing(self.process(&input)));
                }
                SpongeState::Squeezing(mut output) => {
                    if !output.is_empty() {
                        let ret = output.remove(0);
                        self.sponge = Some(SpongeState::Squeezing(output));
                        return ret;
                    }

                    // We've already squeezed out all available elements
                    self.sponge = Some(SpongeState::Absorbing(vec![]));
                }
            }
        }
    }
}

/// A Poseidon hash function, built around a duplex sponge.
pub struct Hash<F: FieldExt, S: Spec<F>>(Duplex<F, S>);

impl<F: FieldExt, S: Spec<F>> Hash<F, S> {
    /// Initializes a new hasher.
    pub fn init(spec: S, rate: usize) -> Self {
        Hash(Duplex::new(spec, rate))
    }

    /// Updates the hasher with the given value.
    pub fn update(&mut self, value: F) {
        self.0.absorb(value);
    }

    /// Finalizes the hasher, returning its output.
    pub fn finalize(mut self) -> F {
        // TODO: Check which state element other implementations use.
        self.0.squeeze()
    }
}
